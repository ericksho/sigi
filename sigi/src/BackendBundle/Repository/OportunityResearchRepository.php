<?php

namespace BackendBundle\Repository;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * OportunityResearchRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OportunityResearchRepository extends \Doctrine\ORM\EntityRepository
{
	public function findOportunitiesByUserId($id)
	{
        $returnResults = null;

	    $query = $this->getEntityManager()
            ->createQuery(
                'SELECT o FROM BackendBundle:OportunityResearch o
                JOIN o.mainMentor mm
                JOIN mm.user mmu
                WHERE mmu.id = :id
                AND o.research IS NULL'
            )->setParameter('id', $id);
     
        try {
            $mainResults = $query->getResult();

            if (count($mainResults) > 0 )
                $returnResults = $mainResults;
            
        } catch (\Doctrine\ORM\NoResultException $e) {
            
        }

        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT o FROM BackendBundle:OportunityResearch o
                JOIN o.secondaryMentor mm
                JOIN mm.user mmu
                WHERE mmu.id = :id
                AND o.research IS NULL'
            )->setParameter('id', $id);
     
        try {
            $secondaryResults = $query->getResult();

            if (count($secondaryResults) > 0 )
                if(is_null($returnResults))
                    $returnResults = $secondaryResults;
                else
                    $returnResults = array_merge($returnResults,$secondaryResults);
            
        } catch (\Doctrine\ORM\NoResultException $e) {
            
        }

        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT o FROM BackendBundle:OportunityResearch o
                JOIN o.thertiaryMentor mm
                JOIN mm.user mmu
                WHERE mmu.id = :id
                AND o.research IS NULL'
            )->setParameter('id', $id);
     
        try {
            $thertiaryResults = $query->getResult();

            if (count($thertiaryResults) > 0 )
                if(is_null($returnResults))
                    $returnResults = $thertiaryResults;
                else
                    $returnResults = array_merge($returnResults,$thertiaryResults);
            
        } catch (\Doctrine\ORM\NoResultException $e) {
            
        }

        return $returnResults;
	}

	public function findPublic()
	{
	    $query = $this->getEntityManager()
            ->createQuery(
                'SELECT o FROM BackendBundle:OportunityResearch o
                WHERE o.publish = true
                AND o.public = true
                AND o.research IS NULL'
            );
     
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
	}

    public function findPublished()
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT o FROM BackendBundle:OportunityResearch o
                WHERE o.publish = true
                AND o.research IS NULL'
            );
     
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
}
