<?php

namespace BackendBundle\Repository;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * OportunityResearchRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OportunityResearchRepository extends \Doctrine\ORM\EntityRepository
{

    public function findOportunitiesByName($name)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT o FROM BackendBundle:OportunityResearch o
                WHERE LOWER(o.name) LIKE LOWER(:name)'
            )->setParameter('name', '%'.$name.'%');
     
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function findPending($user)
    {
        $returnResults = null;

        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT o FROM BackendBundle:OportunityResearch o
                JOIN o.mainMentor mm
                JOIN mm.user mmu
                WHERE mmu.id = :id'
            )->setParameter('id', $id);
     
        try {
            $mainResults = $query->getResult();

            if (count($mainResults) > 0 )
                $returnResults = $mainResults;
            
        } catch (\Doctrine\ORM\NoResultException $e) {
            
        }

        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT o FROM BackendBundle:OportunityResearch o
                JOIN o.secondaryMentor mm
                JOIN mm.user mmu
                WHERE mmu.id = :id'
            )->setParameter('id', $id);
     
        try {
            $secondaryResults = $query->getResult();

            if (count($secondaryResults) > 0 )
                if(is_null($returnResults))
                    $returnResults = $secondaryResults;
                else
                    $returnResults = array_merge($returnResults,$secondaryResults);
            
        } catch (\Doctrine\ORM\NoResultException $e) {
            
        }

        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT o FROM BackendBundle:OportunityResearch o
                JOIN o.thertiaryMentor mm
                JOIN mm.user mmu
                WHERE mmu.id = :id'
            )->setParameter('id', $id);
     
        try {
            $thertiaryResults = $query->getResult();

            if (count($thertiaryResults) > 0 )
                if(is_null($returnResults))
                    $returnResults = $thertiaryResults;
                else
                    $returnResults = array_merge($returnResults,$thertiaryResults);
            
        } catch (\Doctrine\ORM\NoResultException $e) {
            
        }

        return $returnResults;
    }

    public function searchFromForm($form)
    {
        $data = $form->getData();

        $queryBuilder = $this->createQueryBuilder('o');
        $parameters = array();

        if (!is_null($data["creationDate1"]))
        {
            $queryBuilder->andWhere('o.creationDate > :creationDate1');
            $parameters['creationDate1'] = $data["creationDate1"];
        }

        if (!is_null($data["creationDate2"]))
        {
            $queryBuilder->andWhere('o.creationDate < :creationDate2');
            $parameters['creationDate2'] = $data["creationDate2"];
        }

        if (!is_null($data["name"]))
        {
            $queryBuilder->andWhere('LOWER(o.name) LIKE LOWER(:name)');
            $parameters['name'] = '%'.$data["name"].'%';
        }

        if (!is_null($data["description"]))
        {
            $queryBuilder->andWhere('LOWER(o.description) LIKE LOWER(:description)');
            $parameters['description'] = '%'.$data["description"].'%';
        }

        if (!is_null($data["modality"]))
        {
            $queryBuilder->andWhere('o.modality = :modality');
            $parameters['modality'] = $data["modality"];
        }

        if (count($data["oportunityKeywords"])>0)
        {
            foreach ($data["oportunityKeywords"] as $keyword) 
            {
                $queryBuilder->join('o.oportunityKeywords', 'k'.$keyword->getId());
                $queryBuilder->andWhere('k'.$keyword->getId().'.id = :kid'.$keyword->getId());
                $parameters['kid'.$keyword->getId()] = $keyword->getId();
            }
        }

        if (count($data["prerequisites"])>0)
        {
            foreach ($data["prerequisites"] as $prerequisite) 
            {
                $queryBuilder->join('o.prerequisites', 'p'.$prerequisite->getId());
                $queryBuilder->andWhere('p'.$prerequisite->getId().'.id = :pid'.$prerequisite->getId());
                $parameters['pid'.$prerequisite->getId()] = $prerequisite->getId();
            }
        }

        if (count($data["mentors"])>0)
        {
            foreach ($data["mentors"] as $mentor) 
            {
                $queryBuilder->leftjoin('o.mainMentor', 'mm'.$mentor->getId());
                $queryBuilder->orWhere('mm'.$mentor->getId().'.id = :mmid'.$mentor->getId());
                $parameters['mmid'.$mentor->getId()] = $mentor->getId();
            }

            foreach ($data["mentors"] as $mentor) 
            {
                $queryBuilder->leftjoin('o.secondaryMentor', 'sm'.$mentor->getId());
                $queryBuilder->orWhere('sm'.$mentor->getId().'.id = :smid'.$mentor->getId());
                $parameters['smid'.$mentor->getId()] = $mentor->getId();
            }

            foreach ($data["mentors"] as $mentor) 
            {
                $queryBuilder->leftjoin('o.thertiaryMentor', 'tm'.$mentor->getId());
                $queryBuilder->orWhere('tm'.$mentor->getId().'.id = :tmid'.$mentor->getId());
                $parameters['tmid'.$mentor->getId()] = $mentor->getId();
            }
        }


        $queryBuilder->orderBy('o.'.$data["sort"], $data["order"]);
        $queryBuilder->setParameters($parameters);
        $query = $queryBuilder->getQuery();

        return $query->getResult();
    }    

	public function findOportunitiesByUserId($id)
	{
        $returnResults = null;

	    $query = $this->getEntityManager()
            ->createQuery(
                'SELECT o FROM BackendBundle:OportunityResearch o
                JOIN o.mainMentor mm
                JOIN mm.user mmu
                WHERE mmu.id = :id'
            )->setParameter('id', $id);
     
        try {
            $mainResults = $query->getResult();

            if (count($mainResults) > 0 )
                $returnResults = $mainResults;
            
        } catch (\Doctrine\ORM\NoResultException $e) {
            
        }

        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT o FROM BackendBundle:OportunityResearch o
                JOIN o.secondaryMentor mm
                JOIN mm.user mmu
                WHERE mmu.id = :id'
            )->setParameter('id', $id);
     
        try {
            $secondaryResults = $query->getResult();

            if (count($secondaryResults) > 0 )
                if(is_null($returnResults))
                    $returnResults = $secondaryResults;
                else
                    $returnResults = array_merge($returnResults,$secondaryResults);
            
        } catch (\Doctrine\ORM\NoResultException $e) {
            
        }

        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT o FROM BackendBundle:OportunityResearch o
                JOIN o.thertiaryMentor mm
                JOIN mm.user mmu
                WHERE mmu.id = :id'
            )->setParameter('id', $id);
     
        try {
            $thertiaryResults = $query->getResult();

            if (count($thertiaryResults) > 0 )
                if(is_null($returnResults))
                    $returnResults = $thertiaryResults;
                else
                    $returnResults = array_merge($returnResults,$thertiaryResults);
            
        } catch (\Doctrine\ORM\NoResultException $e) {
            
        }

        return $returnResults;
	}

    public function findConcreteApplications()
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT o FROM BackendBundle:OportunityResearch o
                JOIN o.applications a
                WHERE a.state = 3
                OR a.state = 4
                OR a.state = 5
                OR a.state = 6'
            );
     
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }   
    }

    public function countConcreteApplicationes()
    {
        return count($this->findConcreteApplications());
    }

	public function findPublic()
	{
	    $query = $this->getEntityManager()
            ->createQuery(
                'SELECT o FROM BackendBundle:OportunityResearch o
                WHERE o.publish = true
                AND o.public = true'
            );
     
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
	}

    public function findPublished()
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT o FROM BackendBundle:OportunityResearch o
                WHERE o.publish = true'
            );
     
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function findMentorFaculties()
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT m.id as mid, f.id as fid FROM BackendBundle:Mentor m
                JOIN m.department d 
                JOIN d.faculty f'
            );
     
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }   
    }
}
