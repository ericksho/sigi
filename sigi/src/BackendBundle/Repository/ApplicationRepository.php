<?php

namespace BackendBundle\Repository;

/**
 * ApplicationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ApplicationRepository extends \Doctrine\ORM\EntityRepository
{
    public function findUnattendedFromMentor($mentor)
    {
        $TimeLimit = $this->getEntityManager()->getRepository('BackendBundle:TimeLimit')->findOneByName('Plazo para que el mentor acepte/rechaze la postulaci贸n');

        $deadlineAction = date('Y-m-d', strtotime('-'.$TimeLimit->getDays().' days'));

        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT a FROM BackendBundle:Application a
                JOIN a.oportunityResearch o
                LEFT JOIN o.mainMentor mm
                LEFT JOIN o.secondaryMentor sm
                LEFT JOIN o.thertiaryMentor tm
                WHERE a.state = 1
                AND a.lastUpdateDate < :deadlineAction
                AND ( mm.id = :mentorId
                OR sm.id = :mentorId
                OR tm.id = :mentorId )'
            )->setParameters(array('mentorId' => $mentor->getId(), 'deadlineAction' => $deadlineAction));
     
        try {
            $returnResults = $query->getResult();

        } catch (\Doctrine\ORM\NoResultException $e) {
            $returnResults = null;
        }

        return $returnResults;
    }

    public function findUnattendedFromStudent($student)
    {
        $TimeLimit = $this->getEntityManager()->getRepository('BackendBundle:TimeLimit')->findOneByName('Plazo para que el alumno acepte/rechaze la postulaci贸n');

        $deadlineAction = date('Y-m-d', strtotime('-'.$TimeLimit->getDays().' days'));

        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT a FROM BackendBundle:Application a
                JOIN a.student s
                WHERE a.state = 2
                AND a.lastUpdateDate < :deadlineAction
                AND s.id = :studentId'
            )->setParameters(array('studentId' => $student->getId(), 'deadlineAction' => $deadlineAction));
     
        try {
            $returnResults = $query->getResult();

        } catch (\Doctrine\ORM\NoResultException $e) {
            $returnResults = null;
        }

        return $returnResults;
    }

    public function findUnattended($state)
    {
        if($state == 1)
            $TimeLimit = $this->getEntityManager()->getRepository('BackendBundle:TimeLimit')->findOneByName('Plazo para que el mentor acepte/rechaze la postulaci贸n');
        else
            $TimeLimit = $this->getEntityManager()->getRepository('BackendBundle:TimeLimit')->findOneByName('Plazo para que el alumno acepte/rechaze la postulaci贸n');

        $deadlineAction = date('Y-m-d', strtotime('-'.$TimeLimit->getDays().' days'));

        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT a FROM BackendBundle:Application a
                WHERE a.state = :state
                AND a.lastUpdateDate < :deadlineAction'
            )->setParameters(array('state' => $state, 'deadlineAction' => $deadlineAction));
     
        try {
            $returnResults = $query->getResult();

        } catch (\Doctrine\ORM\NoResultException $e) {
            $returnResults = null;
        }

        return $returnResults;
    }

    public function getClassCode($oportunity, $student)
    {
        $classCode = "ERROR404";

        $credits = $oportunity->getCredits(); //agregar al modelo de datos
        switch ($oportunity->getResponsibleMentor()) {
            case 1:
                $mentorIng = $oportunity->getMainMentor()->getUc();        
                break;

            case 2:
                $mentorIng = $oportunity->getSecondaryMentor()->getUc();        
                break;

            case 3:
                $mentorIng = $oportunity->getThertiaryMentor()->getUc();        
                break;
            
            default:
                $mentorIng = false;
                break;
        }
        
        $studentIng = $student->getUC();
        $cmd = $oportunity->getCmd();
        $time = 1;///falta la itegracion con siding 746e y //confirmar que no haya tomado otro IPre que este en proceso

        $graded = $oportunity->getModality();

        //get classcode object
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT c FROM BackendBundle:ClassCode c
                WHERE c.mentorIng = :mentorIng
                AND c.credits = :credits
                AND c.studentIng = :studentIng
                AND c.cmd = :cmd
                AND c.time = :time
                AND c.graded = :graded'
            )->setParameters(array('mentorIng' => $mentorIng, 'credits' => $credits, 'studentIng' => $studentIng, 'cmd' => $cmd, 'time' => $time, 'graded' => $graded));
     
        try 
        {
            $classCodeObject = $query->getResult();
            if(count($classCodeObject) > 0 )
                $classCodeObject = $classCodeObject[0];
            else
                return array('initialsCode' => "ERR", 'numbersCode' => "0000", 'name' => "Sigla no encontrada");      
        }
        catch (Exception $e) 
        { 
            return array('initialsCode' => "ERR", 'numbersCode' => "0000", 'name' => "Sigla no encontrada");
        }

        //si su code es XXXX usamos el del depto
        $initials = $classCodeObject->getInitialsCode();
        if($initials = "XXXX" && $oportunity->getDepartment()->getFaculty()->getId() == 1)//si el departamento no es de ingenieria, la sigla es ING
            $initials = $oportunity->getDepartment()->getInitialsCode();
        else
            $initials = $classCodeObject->getInitialsCode();

        //retornamos la concatenacion de la sigla y el numero
        return array('initialsCode' => $initials, 'numbersCode' => $classCodeObject->getNumbersCode(), 'name' => $classCodeObject->getName());
    }

	public function findByStudentId($id)
	{
        $returnResults = null;

	    $query = $this->getEntityManager()
            ->createQuery(
                'SELECT a FROM BackendBundle:Application a
                JOIN a.student s
                WHERE s.id = :id'
            )->setParameter('id', $id);
     
        try {
            $mainResults = $query->getResult();

            if (count($mainResults) > 0 )
                $returnResults = $mainResults;
            
        } catch (\Doctrine\ORM\NoResultException $e) {
            
        }

        return $returnResults;
	}

    public function findOneByStudentIdAndOportunityId($studentId, $oportunityId)
    {
        $returnResults = null;

        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT a FROM BackendBundle:Application a
                JOIN a.student s
                JOIN a.oportunityResearch o
                WHERE s.id = :ids
                AND o.id = :ido'
            )->setParameters(array('ids' => $studentId,'ido' => $oportunityId));
     
        try {
            $mainResults = $query->getResult();

            if (count($mainResults) > 0 )
                $returnResults = $mainResults;
            
        } catch (\Doctrine\ORM\NoResultException $e) {
            
        }

        return $returnResults[0];
    }

    public function itExists($studentId, $oportunityId)
    {
        $exists = false;

        $results = $this->findOneByStudentIdAndOportunityId($studentId, $oportunityId);

        if (count($results) > 0 )
                $exists = true;

        return $exists;
    }

	public function findByMentorId($id)
	{
        $returnResults = null;

	    $query = $this->getEntityManager()
            ->createQuery(
                'SELECT a FROM BackendBundle:Application a
                JOIN a.oportunityResearch o
                JOIN o.mainMentor mm
                WHERE mm.id = :id'
            )->setParameter('id', $id);
     
        try {
            $mainResults = $query->getResult();

            if (count($mainResults) > 0 )
                $returnResults = $mainResults;
            
        } catch (\Doctrine\ORM\NoResultException $e) {
            
        }

        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT a FROM BackendBundle:Application a
                JOIN a.oportunityResearch o
                JOIN o.secondaryMentor sm
                WHERE sm.id = :id'
            )->setParameter('id', $id);
     
        try {
            $secondaryResults = $query->getResult();

            if (count($secondaryResults) > 0 )
                if(is_null($returnResults))
                    $returnResults = $secondaryResults;
                else
                    $returnResults = array_merge($returnResults,$secondaryResults);
            
        } catch (\Doctrine\ORM\NoResultException $e) {
            
        }

        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT a FROM BackendBundle:Application a
                JOIN a.oportunityResearch o
                JOIN o.thertiaryMentor tm
                WHERE tm.id = :id'
            )->setParameter('id', $id);
     
        try {
            $thertiaryResults = $query->getResult();

            if (count($thertiaryResults) > 0 )
                if(is_null($returnResults))
                    $returnResults = $thertiaryResults;
                else
                    $returnResults = array_merge($returnResults,$thertiaryResults);
            
        } catch (\Doctrine\ORM\NoResultException $e) {
            
        }

        return $returnResults;
	}
}
